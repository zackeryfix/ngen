

C% 

 - All methods must reside inside a namespace.
	namespace {
           void method();
        } 

 
 - All types must reside inside a namespace.
      	namespace {
           type MyType {};
        }
      
 - All namespaces must reside inside a namespace.
    	namespace {
            namespace {}
        }

 - Default namespace is off limits.
	type MyType; // error

 - A type is a namespace.
        type MyType {
           namespace {
              type A {}
           }
        }

 - Refence signatures do not exist.
	void method(int x, int& y) { // error
 	    y = x; 
	}

 - Pointer signatures are natural references.
	void method(int x, int* y) {
 	    y = x; 
            Type* T = y.GetType(); // notice no '->'
	}

 - Include not neccessary
   #include <Ngen.hpp> // error!

 - 'use' statement are a.k.a 'U'niversal 'S'ystem 'E'xtensions 
   use Ngen;

 - A 'main(Array<Text> args)' function is required for executables.

 - Main must be OUTSIDE of namespace.
   	namespace {
     	    main(Array<Text> args) {} // error! 
  	}

 - Main function has no return type.  Not even void.  Error by exception.

 - 'Dot' or '.' is evaluated automatically as '::', '->', or '.'.

 - Support for 'mysterious' arguments.  (In .NET/C# a.k.a. dynamic (our dynamic is COOL3R))
   int method(? wha, ? who) {
       return wha.DoWho(who); // :D
   }
  
 - Lambda expressions
   Where((Type* e)[]{ return e.Name.Contains("int", ECulture.Invariant); }); // C%
   Where(e => e.Name.Contains("int", ECulture.Invariant)); // C#

C% Tutorial - Hello World!
------------------------------------------------------
main(array<text> args) {
    Console.WriteLine("Hello World!");
}

------------------------------------------------------

C% Tutorial - Reflection/Linq
------------------------------------------------------
use Rti;

main(array<text> args) {
    Type*[] types = Reflection.GetAllTypes().
	Select(Type* e -> return e.Name.Contains("int", ECulture.Invariant)).
        ForEach((Type* type) [] {
	    Console.WriteLine(type.FullName());
        }).
        ToArray();
}
------------------------------------------------------
